#+Title: Expressive Parallel Analytics with Clojure
#+Author:
#+Email: @henrygarner

#+REVEAL_THEME: zenburn
#+REVEAL_EXTRA_CSS: ./extra.css
#+OPTIONS: num:nil toc:nil reveal_mathjax:t reveal_history:t reveal_control:nil reveal_progress:nil reveal_center:true reveal_slide_number:nil
#+REVEAL_TRANS: none

#+BEGIN_NOTES
coach, data analytics CTO,
practicing data scientist

Titles
Transducers from the bottom up
Fun with Reducing functions
#+END_NOTES

* Mission-critical analysis

[[./images/mastodon.png]]

[[./images/the-wur.png]]

#+BEGIN_NOTES
- Collaborate

- List of prestigious academic institutions

- Released a couple of months ago
- New methodology
- New implementation
- Clojure!
#+END_NOTES

* Metastatistics

https://www.timeshighereducation.com/news/ranking-methodology-2016

- 13 performance indicators
- 10 quotient indicators
- 4  weighted quotients across 6 subjects
- 1,000+ institutions
- 7 ranking tables

#+BEGIN_NOTES
- Won't speak in detail about methodology
- Gives a flavour for the kinds of problems I'm addressing.

This isn't BIG DATA
#+END_NOTES

* "Annoying-sized data"

#+ATTR_REVEAL: :frag appear
[[./images/bruce.jpg]]


#+BEGIN_NOTES
- Not large enough for Hadoop
- Large enough to be worth optimizing

#+END_NOTES

* Analytic sequence

#+ATTR_REVEAL: :frag (appear appear appear appear appear) :frag_idx (1 1 1 4)
1. Load & join
2. Apply rules
   #+ATTR_REVEAL: :frag (appear appear appear) :frag_idx (2 2 2)
   1. Apply filters
   2. Normalise data
      #+ATTR_REVEAL: :frag (appear appear appear) :frag_idx (3 3 3)
      1. Harmonise units
      2. Summary statistics
      3. Harmonise ranges
   3. Calculate score
3. Output
4. x 13 x 7

#+BEGIN_NOTES
- 000s, units, different currencies
- PPP
- get everything between zero and 1.

- This is data engineering
- Want to productionise sexy algorithm
- Maybe you're building an intricate data processing system
#+END_NOTES

* 

#+BEGIN_SRC clojure
(load-data "data.edn")

;;({:name "A", :fx 0.8, :a 90, :b 50}
;; {:name "B", :fx 0.2, :a 80, :b 80}
;; {:name "C", :fx 0.1, :a 60, :b 40}
;; {:name "D", :fx 0.5, :a 50, :b 70})
#+END_SRC

#+BEGIN_NOTES
- Imagine this sample data. We'll use this for all our examples.
- Fx stands for financial exchange rate
#+END_NOTES

* 

#+BEGIN_SRC clojure
(->> (load-data "data.edn")
     (filter relevant?)
     (map convert-currency)
     (map assign-score))

;;({:name "A", :fx 0.8, :a 112.5, :b 62.5, :score 175.0}
;; {:name "B", :fx 0.2, :a 400.0, :b 400.0, :score 800.0}
;; {:name "D", :fx 0.5, :a 100.0, :b 140.0, :score 240.0})
#+END_SRC

#+BEGIN_NOTES
- Problems:
- Intermediate collections
- Output is always a lazy sequence

- mapv, channels
#+END_NOTES

* 

#+BEGIN_SRC clojure
(filter relevant?)
#+END_SRC

#+BEGIN_NOTES
- This is a transducer
- Free computation
-
- What's it like?
#+END_NOTES

* 
:PROPERTIES:
:CUSTOM_ID: pedal
:reveal_background: ./images/pedals/3824494272_8fb3ea261a_o.jpg
:END:

CC BY 2.0 https://www.flickr.com/photos/cmatsuoka/3824494272/

#+BEGIN_NOTES
- Effects pedal
#+END_NOTES

* 

#+BEGIN_SRC clojure
(def xform
  (comp (filter relevant?)
        (map convert-currency)
        (map assign-score)))
#+END_SRC

* 
:PROPERTIES:
:CUSTOM_ID: pedals
:reveal_background: ./images/pedals/4462883383_a3ed642205_o.jpg
:END:

CC BY 2.0 https://www.flickr.com/photos/cmatsuoka/4462883383/

* 

#+BEGIN_SRC clojure
(sequence xform (load-data "data.edn"))

;;({:name "A", :fx 0.8, :a 112.5, :b 62.5, :score 175.0}
;; {:name "B", :fx 0.2, :a 400.0, :b 400.0, :score 800.0}
;; {:name "D", :fx 0.5, :a 100.0, :b 140.0, :score 240.0})
#+END_SRC

#+BEGIN_NOTES
- New sequence processing functions expecting transducers
-
- It's like we've connected to the effects loop
#+END_NOTES

* 
:PROPERTIES:
:CUSTOM_ID: guitar
:reveal_background: ./images/guitars/4779928776_0783c072fe_o.jpg
:END:

* 

#+BEGIN_SRC clojure
(->> (load-data "data.edn")
     (sequence (comp xform (take 2))))

;;({:name "A", :fx 0.8, :a 112.5, :b 62.5, :score 175.0}
;; {:name "B", :fx 0.2, :a 400.0, :b 400.0, :score 800.0})

(->> (load-data "data.edn")
     (sequence (comp xform (map :score))))

;; (175.0 800.0 240.0)
#+END_SRC

#+BEGIN_NOTES
- Great things:
- Extensible!
- But these things are sequences
#+END_NOTES

* 
:PROPERTIES:
:CUSTOM_ID: amp
:reveal_background: ./images/amps/9.jpg
:END:

#+BEGIN_NOTES
- We're connected to our trusty workhorse amp
#+END_NOTES

* 

#+BEGIN_SRC clojure
(def scores
  (comp xform (map :score)))

(->> (load-data "data.edn")
     (transduce scores +))

;; 1215.0
#+END_SRC

#+BEGIN_NOTES
- We also get transduce
- Can completely alter the output
#+END_NOTES

* 
:PROPERTIES:
:CUSTOM_ID: tesla
:reveal_background: ./images/amps/Tesla-Coil-lighting-stunt-with-guitar.jpg
:END:

#+BEGIN_NOTES
- No intermediate collections
- 
- Let's back up
- Show why step functions and transduce are cool
#+END_NOTES

* 

#+BEGIN_SRC clojure
(defn mean [xs]
  (let [sum   (reduce + xs)
        count (count xs)]
    (when-not (zero? count)
      (/ sum count)))
#+END_SRC

#+BEGIN_NOTES
- This is mean
- Two iterations over the collection
- 
- We're functional programmers, we have reduce!
#+END_NOTES

* 

#+BEGIN_SRC clojure
(defn mean [accum x]
  (-> (update-in accum [:sum] + x)
      (update-in [:count] inc)))
#+END_SRC

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC clojure
(reduce mean (range 10))

;; => ...?
#+END_SRC

#+BEGIN_NOTES
What will happen?
#+END_NOTES

* 
#+BEGIN_SRC text
1. Unhandled java.lang.NullPointerException
   (No message)

       Numbers.java: 1013  clojure.lang.Numbers/ops
       Numbers.java:  112  clojure.lang.Numbers/inc
           core.clj:  892  clojure.core/inc
           AFn.java:  154  clojure.lang.AFn/applyToHelper
           AFn.java:  144  clojure.lang.AFn/applyTo
           core.clj:  632  clojure.core/apply
           core.clj: 5923  clojure.core/update-in
        RestFn.java:  445  clojure.lang.RestFn/invoke
          sweet.clj:  242  example.sweet/mean-reducer
     LongRange.java:  222  clojure.lang.LongRange/reduce
           core.clj: 6514  clojure.core/reduce
               REPL:    1  example.sweet/eval28337

#+END_SRC

* 
:PROPERTIES:
:CUSTOM_ID: slug1
:reveal_background: ./images/slugs/ss1.jpg
:END:

http://slugsolos.tumblr.com/

* 

#+BEGIN_SRC clojure
(reduce mean {:sum 0 :count 0} (range 10))

;; => {:sum 45, :count 10}
#+END_SRC

* 

#+BEGIN_SRC clojure
(defn mean
  ;; Init
  ([] {:sum 0 :count 0})
  
  ;; Step
  ([accum x]
   (-> (update-in accum [:count] inc)
       (update-in [:sum] + x))))

#+END_SRC
#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC clojure
(reduce mean (mean) (range 10))

;; => {:sum 45, :count 10}
#+END_SRC

#+BEGIN_NOTES
- Output isn't really what we want
#+END_NOTES

* 

#+BEGIN_SRC clojure
(defn mean
  ;; Init
  ([] {:sum 0 :count 0})

  ;; Step
  ([accum x]
   (-> (update-in accum [:count] inc)
       (update-in [:sum] + x)))

  ;; Complete
  ([{:keys [sum count]}]
   (when-not (zero? count)
     (/ sum count))))
#+END_SRC
#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC clojure
(mean (reduce mean (mean) (range 10)))

;; => 9/2
#+END_SRC

#+BEGIN_NOTES
- When we're done we call complete
-
- This is what transduce does
#+END_NOTES

* 
#+BEGIN_SRC clojure
(transduce (map identity) mean (range 10))

;; => 9/2
#+END_SRC

#+BEGIN_NOTES
- Behviour for free
-
- What is identity transducer?
#+END_NOTES

* What is the identity transducer?

* 

#+BEGIN_SRC clojure
  (defn identity-transducer [rf]
    (fn
      ([]      (rf))         ;; Init
      ([acc]   (rf acc))     ;; Complete
      ([acc x] (rf acc x)))) ;; Step
#+END_SRC

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC clojure
  (defn identity-transducer [rf] rf)
#+END_SRC

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC clojure
  (def identity-transducer identity)
#+END_SRC

* 

#+BEGIN_SRC clojure
(transduce identity mean (range 10))

;; => 9/2
#+END_SRC

#+BEGIN_NOTES
- Look at a more sophisticated example
#+END_NOTES

* 

https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance

#+BEGIN_SRC clojure
  (defn variance
    ;; Init
    ([] [0 0 0])
 
    ;; Step
    ([[count mean sum-of-squares] x]
     (let [count' (inc count)
           mean'  (+ mean (/ (- x mean) count'))]
       [count' mean'
        (+ sum-of-squares (* (- x mean') (- x mean)))]))

    ;; Complete
    ([[count mean sum-of-squares]]
     (/ sum-of-squares (max 1 (dec count)))))
#+END_SRC

* 
#+BEGIN_SRC clojure
  (->> (load-data "data.edn")
       (transduce scores variance))
       
  ;; => 118075.0
#+END_SRC

#+BEGIN_NOTES
Variance is useful, but we usually want standard deviation
#+END_NOTES

* 

[[./images/normal-curve.png]]

* 

#+BEGIN_SRC clojure
(def standard-deviation
  (completing variance #(Math/sqrt (variance %))))
#+END_SRC

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC clojure
(->> (load-data "data.edn")
     (transduce scores standard-deviation))

;; => 343.6204301260331
#+END_SRC

#+BEGIN_NOTES
- Completing introduced in Clojure 1.7

- Want to calculate mean and standard deviation
- At the same time.
- Variance is a black box
#+END_NOTES

* 

#+BEGIN_SRC clojure
(->> (load-data "data.edn")
     (map (juxt :a :b)))

;; ([90 50] [80 80] [60 40] [50 70])
#+END_SRC

#+BEGIN_NOTES
- Might try and do this with step functions
#+END_NOTES

* 
#+BEGIN_SRC clojure
(->> (load-data "data.edn")
     (transduce scores
                (juxt mean standard-deviation)))

;; => ?
#+END_SRC

* 
:PROPERTIES:
:CUSTOM_ID: slug2
:reveal_background: ./images/slugs/rUF67Fd.jpg
:END:

http://slugsolos.tumblr.com/

* 

#+BEGIN_SRC text
1. Unhandled java.lang.NullPointerException
   (No message)

     Numbers.java: 1013  clojure.lang.Numbers/ops
     Numbers.java:  112  clojure.lang.Numbers/inc
         core.clj:  892  clojure.core/inc
         AFn.java:  154  clojure.lang.AFn/applyToHelper
         AFn.java:  144  clojure.lang.AFn/applyTo
         core.clj:  632  clojure.core/apply
         core.clj: 5923  clojure.core/update-in
      RestFn.java:  445  clojure.lang.RestFn/invoke
        sweet.clj:   82  example.sweet/mean
         core.clj: 2464  clojure.core/juxt/fn
         core.clj: 2611  clojure.core/map/fn/fn
         core.clj: 2611  clojure.core/map/fn/fn
         core.clj: 2611  clojure.core/map/fn/fn
         core.clj: 2675  clojure.core/filter/fn/fn
    protocols.clj:  167  clojure.core.protocols/fn
    protocols.clj:   19  clojure.core.protocols/fn/G
    protocols.clj:   31  clojure.core.protocols/seq-reduce
    protocols.clj:  101  clojure.core.protocols/fn
    protocols.clj:   13  clojure.core.protocols/fn/G
         core.clj: 6590  clojure.core/transduce
         core.clj: 6585  clojure.core/transduce
             REPL:    2  example.sweet/eval47021

#+END_SRC

* 

#+BEGIN_SRC clojure
(defn juxt-r [& rfns]
  (fn
    ([]      (mapv (fn [f]   (f))     rfns))
    ([acc]   (mapv (fn [f a] (f a))   rfns acc))
    ([acc x] (mapv (fn [f a] (f a x)) rfns acc))))

(def rf
  (juxt-r + conj))
#+END_SRC

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC clojure
(transduce identity rf (range 10))

;; => [45 [0 1 2 3 4 5 6 7 8 9]]

#+END_SRC

* 

#+BEGIN_SRC clojure
(def rf
  (juxt-r + ((take 3) conj)))

(transduce identity rf (range 10))

;; => ...?
;;
#+END_SRC

* 

#+BEGIN_SRC clojure
(def rf
  (juxt-r + ((take 3) conj)))

(transduce identity rf (range 10))

;; => [45 #object[clojure.lang.Reduced {:status :ready,
;;                                      :val [0 1 2]}]]
#+END_SRC

* 
:PROPERTIES:
:CUSTOM_ID: slug3
:reveal_background: ./images/slugs/tumblr_n9jjkbfgE21thoekio1_500.jpg
:END:


#+BEGIN_NOTES
What's going on inside take?
#+END_NOTES

* 

#+BEGIN_SRC clojure
  (defn take [n]
    (fn [rf]
      (let [nv (volatile! n)]
        (fn
          ([] (rf))
          ([result] (rf result))
          ([result input]
           (let [n @nv
                 nn (vswap! nv dec)
                 result (if (pos? n)
                          (rf result input)
                          result)]
             (if (not (pos? nn))
               (ensure-reduced result)
               result)))))))
#+END_SRC

* 

#+BEGIN_SRC clojure
(defn juxt-r [& rfns]
  (fn
    ([]    (mapv (fn [f] (f)) rfns))
    ([acc] (mapv (fn [f a] (f (unreduced a))) rfns acc))
    ([acc x]
     (let [all-reduced? (volatile! true)
           results (mapv (fn [f a]
                           (if-not (reduced? a)
                             (do (vreset! all-reduced?
                                          false)
                                 (f a x))
                             a))
                         rfns acc)]
       (if @all-reduced? (reduced results) results)))))
#+END_SRC
#+BEGIN_NOTES
- If all values are reduced, we're reduced.
- Only call step function on non-reduced accumulators
-
- Fixed! We have parallel step functions
#+END_NOTES

* 
:PROPERTIES:
:CSS_ID: sound-wall
:reveal_background: ./images/speakers/Grateful-Dead-Wall-of-Sound-Center-600x360.jpg
:END:

#+BEGIN_NOTES
-
- A word of warning...
#+END_NOTES

* 

#+BEGIN_SRC clojure
(def rf
  (juxt-r + ((take 3) conj)))

(transduce identity rf (range 10))

;; => [45 [0 1 2]]
#+END_SRC

#+ATTR_REVEAL: :frag appear
...but...
#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC clojure
(transduce identity rf (range 10))

;; => [45 []]
#+END_SRC

#+BEGIN_NOTES
Don't alias a stateful transducer / reducing function
#+END_NOTES

* 
:PROPERTIES:
:CUSTOM_ID: clash
:reveal_background: ./images/clash.jpg
:END:

* 

#+BEGIN_SRC clojure
(def rf
  ((map inc) +))

(transduce identity rf (range 10))

;; => 55
#+END_SRC

#+BEGIN_NOTES
There's nothing wrong with this

In fact it opens up possibilities
#+END_NOTES

* 

#+BEGIN_SRC clojure
(defn facet [rf fns]
  (->> (map (fn [f] ((map f) rf)) fns)
       (apply juxt-r)))

(def rf
  (facet + [:a :b]))
#+END_SRC

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC clojure
(->> (load-data "data.edn")
     (transduce identity rf))

;; => [280 240]
#+END_SRC

#+BEGIN_NOTES
- A and b are just ordinary functions
They will be applied independently to the input

- Compare to juxt.

- What can we do with this?
#+END_NOTES

* 

#+BEGIN_SRC clojure
(defn weighted-mean [nf df]
  (let [rf (facet mean [nf df])]
    (completing rf (fn [x]
                     (let [[n d] (rf x)]
                       (when-not (zero? d)
                           (/ n d)))))))
#+END_SRC

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC clojure
(->> (load-data "data.edn")
     (transduce identity (weighted-mean :a :b)))

;; => 7/6
#+END_SRC

#+BEGIN_NOTES
What else could we do by wrapping juxt-r?
#+END_NOTES

* 

#+BEGIN_SRC clojure
(defn fuse [kvs]
  (let [rfns (vals kvs)
        rf   (apply juxt-r rfns)]
    (completing rf #(zipmap (keys kvs) (rf %)))))

(def rf
  (fuse {:mean mean
         :sd   standard-deviation}))
#+END_SRC

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC clojure
(->> (load-data "data.edn")
     (transduce (map :a) rf))

;; => {:mean 70, :sd 18.257418583505537}
#+END_SRC

* 

#+BEGIN_SRC clojure
(def rf
  (fuse {:mean-score ((map :score) mean)
         :fields (facet
                  (fuse {:mean mean
                         :sd   standard-deviation})
                  [:a :b])}))
#+END_SRC

#+ATTR_REVEAL: :frag reveal
#+BEGIN_SRC clojure
(->> (load-data "data.edn")
     (transduce xform rf))

;; {:mean-score 405.0,
;;  :fields [{:mean 204.16666666666666,
;;            :sd 169.71176545346918}
;;           {:mean 200.83333333333334,
;;            :sd 176.78258775494078}]}
#+END_SRC

* Success!
:PROPERTIES:
:CUSTOM_ID: hero
:reveal_background: ./images/guitars/funny-guitar-hero-kid.jpg
:END:

* Hey, where's my parallelism?

* Reducers

#+BEGIN_SRC txt
solve(problem):
    if problem is small enough:
        solve problem directly (sequential algorithm)
    else:
        for part in subdivide(problem)
            fork subtask to solve part
        join all subtasks spawned in previous loop
        combine results from subtasks
#+END_SRC

#+BEGIN_NOTES
Clojure 1.5
#+END_NOTES

* 

[[./images/reductions-tree.png]]

* 

[[./images/reduce-combine.png]]

* The Interquartile Range

[[./images/iqr.png]]

* 
#+BEGIN_SRC clojure
(import '[org.HdrHistogram DoubleHistogram])

(defn iqr-reducer
  ([] (DoubleHistogram. 1e8 3))
  ([hist x] (doto hist (.recordValue x)))
  ([hist] hist))

(defn iqr-combiner
  ([] (DoubleHistogram. 1e8 3))
  ([a b] (doto a (.add b)))
  ([hist]
   (vector (.getValueAtPercentile hist 25)
           (.getValueAtPercentile hist 75))))
#+END_SRC

* Fold

* 
#+BEGIN_SRC clojure
(require '[clojure.core.reducers :as r])

(->> (load-data "data.edn")
     (eduction xform (map :score))
     (r/fold iqr-combiner iqr-reducer))


;; => #object[org.HdrHistogram.DoubleHistogram]
#+END_SRC

#+BEGIN_NOTES
- Eduction
- 
- Complete will not be called...
#+END_NOTES

* 
#+BEGIN_SRC clojure
(require '[clojure.core.reducers :as r])

(->> (load-data "data.edn")
     (eduction xform (map :score))
     (r/fold iqr-combiner iqr-reducer)
     (iqr-combiner))

;; => [175.0 240.0]
#+END_SRC

#+BEGIN_NOTES
- Do we have any other new parallel tools?
#+END_NOTES

* 
:PROPERTIES:
:CUSTOM_ID: parallel
:reveal_background: ./images/multineck/SteveVai_081114.jpg
:END:

* core.async

"The conveyor belt of awesomeness"
-- Kris Jenkins

* 

- reduce
- map<
- pipeline

* 

- reduce
- +map<+
- pipeline

* 

#+BEGIN_SRC clojure
(require '[clojure.core.async :as async])

(defn fold [n xform reducef combinef in]
  (let [reduced (async/chan n)
        f       (xform reducef)]
    (->> (for [_ (range n)]
           (async/reduce f (f) in))
         (async/merge)
         (async/pipeline n reduced (map f)))
    (async/go
      (->> (async/reduce combinef (combinef) reduced)
           (async/<!)
           (combinef)))))
#+END_SRC

#+BEGIN_NOTES
- CSP channels and goroutines
- Cooperative multithreading
- Fixed size theadpool (cpus * 2) + 42
-
- Fully parallel!!
#+END_NOTES

* 
:PROPERTIES:
:CUSTOM_ID: parallel2
:reveal_background:  ./images/multineck/billbailey.jpg
:END:

https://www.youtube.com/watch?v=EAZdiJGWdfI

* 

#+BEGIN_SRC clojure
(def data (take 100000 (cycle (load-data "data.edn"))))

(quick-bench
 (->> (async/to-chan data)
      (fold 8 (comp xform (map :score))
            histogram-reducer
            histogram-combiner)
      (async/<!!)))

;; Execution time mean : 162.811354 ms
;; Execution time std-deviation : 168.664279 ms

#+END_SRC

#+BEGIN_NOTES
A word of caution...
#+END_NOTES

* 

#+BEGIN_SRC clojure
(quick-bench
 (->> (eduction xform (map :score) data)
      (r/fold 8
              histogram-combiner
              histogram-reducer)))

;; Execution time mean : 50.593113 ms
;; Execution time std-deviation : 2.644261 ms

#+END_SRC

* Summary

#+ATTR_REVEAL: :frag (appear)
- Step functions
  - init, step, complete
  - reduced?
  - composition:
    - juxt-r, facet, fuse
- Transducible contexts:
  - sequence, transduce, eduction
  - fold

* References

#+ATTR_REVEAL: :frag (appear)
- https://github.com/cgrand/xforms
  - reduce, into, by-key, partition, pad, for and window
  - str, str!, avg, count, juxt, juxt-map and first
- https://github.com/aphyr/tesser
  - correlation, variance, covariance, standard-deviation
- https://tbaldridge.pivotshare.com/
  - Logic Programming, Core.Async, Transients, and more

* If you liked this...

http://cljds.com/cljds-book | 
http://cljds.com/cljds-amzn

[[./images/clojure-data-science.png]]

 https://github.com/clojuredatascience

#+BEGIN_NOTES
- This is new material.
- Learn statistics and machine learning with Clojure

- Chapters on classification, clustering, recommenders.
#+END_NOTES

* Thanks!

https://github.com/henrygarner/cljx-december-2015

[[./images/henrygarner.jpeg]]

Henry Garner

@henrygarner

* Questions?

* Lunch!

